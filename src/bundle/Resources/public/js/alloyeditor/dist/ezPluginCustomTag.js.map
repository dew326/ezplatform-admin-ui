{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///ezPluginCustomTag.js","webpack:///webpack/bootstrap 6e6d4d03b08ef41c0dc7","webpack:///./src/bundle/Resources/public/js/alloyeditor/src/plugins/ez-custom-tag.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","61","global","CKEDITOR","plugins","add","requires","init","editor","widgets","defaults","draggable","template","requiredContent","insert","instance","element","dom","createFromHtml","output","wrapper","wrapElement","temp","documentFragment","getDocument","append","initOn","eZ","appendElement","getByElement","ready","fire","focus","edit","on","fireEditorInteraction","syncAlignment","getEzConfigElement","setWidgetContent","cancelEditEvents","setName","data","cancel","event","align","setAlignment","unsetAlignment","type","isAligned","content","getFirst","next","getNext","remove","node","appendText","setConfig","key","value","valueElement","getValueElement","setText","getConfig","getText","undefined","findOne","config","evt","wrapperRegion","getWrapperRegion","target","$","pageX","left","pageY","top","height","nativeEvent","selectionData","region","scroll","getWindow","getScrollPosition","getClientRect","y","bottom","x","right","direction","SELECTION_TOP_TO_BOTTOM","window"],"mappings":"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","file":"ezPluginCustomTag.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ezPluginCustomTag\"] = factory();\n\telse\n\t\troot[\"eZ\"] = root[\"eZ\"] || {}, root[\"eZ\"][\"ezAlloyEditor\"] = root[\"eZ\"][\"ezAlloyEditor\"] || {}, root[\"eZ\"][\"ezAlloyEditor\"][\"ezPluginCustomTag\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ezPluginCustomTag\"] = factory();\n\telse\n\t\troot[\"eZ\"] = root[\"eZ\"] || {}, root[\"eZ\"][\"ezAlloyEditor\"] = root[\"eZ\"][\"ezAlloyEditor\"] || {}, root[\"eZ\"][\"ezAlloyEditor\"][\"ezPluginCustomTag\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 61);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 61:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n(function (global) {\n    var DATA_ALIGNMENT_ATTR = 'ezalign';\n\n    if (CKEDITOR.plugins.get('ezcustomtag')) {\n        return;\n    }\n\n    /**\n     * CKEditor plugin to configure the widget plugin so that it recognizes the\n     * `div[data-ezelement=\"embed\"]` elements as widget.\n     *\n     * @class ezembed\n     * @namespace CKEDITOR.plugins\n     * @constructor\n     */\n    CKEDITOR.plugins.add('ezcustomtag', {\n        requires: 'widget,ezaddcontent',\n\n        init: function init(editor) {\n            editor.widgets.add('ezcustomtag', {\n                defaults: {\n                    name: \"customtag\"\n                },\n                draggable: false,\n                template: '<div data-ezelement=\"ezcustomtag\" data-ezname=\"{name}\"></div>',\n                requiredContent: 'div',\n\n                /**\n                 * Insert an `ezembed` widget in the editor. It overrides the\n                 * default implementation to make sure that in the case where an\n                 * embed widget is focused, a new one is added after it.\n                 *\n                 * @method insert\n                 */\n                insert: function insert() {\n                    var element = CKEDITOR.dom.element.createFromHtml(this.template.output(this.defaults)),\n                        wrapper = editor.widgets.wrapElement(element, this.name),\n                        temp = new CKEDITOR.dom.documentFragment(wrapper.getDocument()),\n                        instance;\n\n                    temp.append(wrapper);\n                    editor.widgets.initOn(element, this.name);\n                    editor.eZ.appendElement(wrapper);\n\n                    instance = editor.widgets.getByElement(wrapper);\n                    instance.ready = true;\n                    instance.fire('ready');\n                    instance.focus();\n                },\n\n                /**\n                 * It's not possible to *edit* an embed widget in AlloyEditor,\n                 * so `edit` directly calls `insert` instead. This is needed\n                 * because by default, the CKEditor engine calls this method\n                 * when an embed widget has the focus and the `ezembed` command\n                 * is executed. In AlloyEditor, we want to insert a new widget,\n                 * not to `edit` the focused widget as the editing process is\n                 * provided by the style toolbar.\n                 *\n                 * @method edit\n                 */\n                edit: function edit() {\n                    this.insert();\n                },\n\n                init: function init() {\n                    this.on('focus', this.fireEditorInteraction);\n                    this.syncAlignment();\n                    this.getEzConfigElement();\n                    this.setWidgetContent('Testing content');\n                    this.cancelEditEvents();\n                },\n\n                /**\n                 * Sets the `name` of the custom tag.\n                 *\n                 * @method setName\n                 * @param {String} href\n                 * @return {CKEDITOR.plugins.widget}\n                 */\n                setName: function setName(name) {\n                    this.element.data('ezname', name);\n\n                    return this;\n                },\n\n                /**\n                 * Cancels the widget events that trigger the `edit` event as\n                 * an embed widget can not be edited in a *CKEditor way*.\n                 *\n                 * @method cancelEditEvents\n                 */\n                cancelEditEvents: function cancelEditEvents() {\n                    var cancel = function cancel(event) {\n                        return event.cancel();\n                    };\n\n                    this.on('doubleclick', cancel, null, null, 5);\n                    this.on('key', cancel, null, null, 5);\n                },\n\n                /**\n                 * Initializes the alignment on the widget wrapper if the widget\n                 * is aligned.\n                 *\n                 * @method syncAlignment\n                 */\n                syncAlignment: function syncAlignment() {\n                    var align = this.element.data(DATA_ALIGNMENT_ATTR);\n\n                    if (align) {\n                        this.setAlignment(align);\n                    } else {\n                        this.unsetAlignment();\n                    }\n                },\n\n                /**\n                 * Sets the alignment of the embed widget to `type` and fires\n                 * the corresponding `editorInteraction` event.\n                 *\n                 * @method setAlignment\n                 * @param {String} type\n                 */\n                setAlignment: function setAlignment(type) {\n                    this.wrapper.data(DATA_ALIGNMENT_ATTR, type);\n                    this.element.data(DATA_ALIGNMENT_ATTR, type);\n                },\n\n                /**\n                 * Removes the alignment of the widget and fires the\n                 * corresponding `editorInteraction` event.\n                 *\n                 * @method unsetAlignment\n                 */\n                unsetAlignment: function unsetAlignment() {\n                    this.wrapper.data(DATA_ALIGNMENT_ATTR, false);\n                    this.element.data(DATA_ALIGNMENT_ATTR, false);\n                },\n\n                /**\n                 * Checks whether the embed is aligned with `type` alignment.\n                 *\n                 * @method isAligned\n                 * @param {String} type\n                 * @return {Boolean}\n                 */\n                isAligned: function isAligned(type) {\n                    return this.wrapper.data(DATA_ALIGNMENT_ATTR) === type;\n                },\n\n                /**\n                 * Sets the widget content. It makes sure the config element is\n                 * not overwritten.\n                 *\n                 * @method setWidgetContent\n                 * @param {String|CKEDITOR.dom.node} content\n                 * @return {CKEDITOR.plugins.widget}\n                 */\n                setWidgetContent: function setWidgetContent(content) {\n                    var element = this.element.getFirst(),\n                        next = void 0;\n\n                    while (element) {\n                        next = element.getNext();\n                        if (!element.data || !element.data('ezelement')) {\n                            element.remove();\n                        }\n                        element = next;\n                    }\n\n                    if (content instanceof CKEDITOR.dom.node) {\n                        this.element.append(content);\n                    } else {\n                        this.element.appendText(content);\n                    }\n\n                    return this;\n                },\n\n                /**\n                 * Sets a config value under the `key` for the embed.\n                 *\n                 * @method setConfig\n                 * @param {String} key\n                 * @param {String} value\n                 * @return {CKEDITOR.plugins.widget}\n                 */\n                setConfig: function setConfig(key, value) {\n                    var valueElement = this.getValueElement(key);\n\n                    if (!valueElement) {\n                        valueElement = new CKEDITOR.dom.element('span');\n                        valueElement.data('ezelement', 'ezvalue');\n                        valueElement.data('ezvalue-key', key);\n                        this.getEzConfigElement().append(valueElement);\n                    }\n\n                    valueElement.setText(value);\n\n                    return this;\n                },\n\n                /**\n                 * Returns the config value for the `key` or undefined if the\n                 * config key is not found.\n                 *\n                 * @method getConfig\n                 * @return {String}\n                 */\n                getConfig: function getConfig(key) {\n                    var valueElement = this.getValueElement(key);\n\n                    return valueElement ? valueElement.getText() : undefined;\n                },\n\n                /**\n                 * Returns the Element holding the config under `key`\n                 *\n                 * @method getValueElement\n                 * @param {String} key\n                 * @return {CKEDITOR.dom.element}\n                 */\n                getValueElement: function getValueElement(key) {\n                    return this.element.findOne('[data-ezelement=\"ezvalue\"][data-ezvalue-key=\"' + key + '\"]');\n                },\n\n                /**\n                 * Returns the element used as a container the config values. if\n                 * it does not exist, it is created.\n                 *\n                 * @method getEzConfigElement\n                 * @return {CKEDITOR.dom.element}\n                 */\n                getEzConfigElement: function getEzConfigElement() {\n                    var config = this.element.findOne('[data-ezelement=\"ezconfig\"]');\n\n                    if (!config) {\n                        config = new CKEDITOR.dom.element('span');\n                        config.data('ezelement', 'ezconfig');\n                        this.element.append(config, true);\n                    }\n\n                    return config;\n                },\n\n                /**\n                 * Fires the editorInteraction event so that AlloyEditor editor\n                 * UI remains visible and is updated. This method also computes\n                 * `selectionData.region` and the `pageX` and `pageY` properties\n                 * so that the add toolbar is correctly positioned on the\n                 * widget.\n                 *\n                 * @method fireEditorInteraction\n                 * @param {Object|String} evt this initial event info object or\n                 * the event name for which the `editorInteraction` is fired.\n                 */\n                fireEditorInteraction: function fireEditorInteraction(evt) {\n                    var wrapperRegion = this.getWrapperRegion();\n                    var name = evt.name || evt;\n                    var event = {\n                        editor: editor,\n                        target: this.element.$,\n                        name: \"widget\" + name,\n                        pageX: wrapperRegion.left,\n                        pageY: wrapperRegion.top + wrapperRegion.height\n                    };\n\n                    editor.focus();\n                    this.focus();\n\n                    editor.fire('editorInteraction', {\n                        nativeEvent: event,\n                        selectionData: {\n                            element: this.element,\n                            region: wrapperRegion\n                        }\n                    });\n                },\n\n                /**\n                 * Returns the wrapper element region.\n                 *\n                 * @method getWrapperRegion\n                 * @private\n                 * @return {Object}\n                 */\n                getWrapperRegion: function getWrapperRegion() {\n                    var scroll = this.wrapper.getWindow().getScrollPosition();\n                    var region = this.wrapper.getClientRect();\n\n                    region.top += scroll.y;\n                    region.bottom += scroll.y;\n                    region.left += scroll.x;\n                    region.right += scroll.x;\n                    region.direction = CKEDITOR.SELECTION_TOP_TO_BOTTOM;\n\n                    return region;\n                }\n            });\n        }\n    });\n})(window);\n\n/***/ })\n\n/******/ })[\"default\"];\n});\n\n\n// WEBPACK FOOTER //\n// ezPluginCustomTag.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 61);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 6e6d4d03b08ef41c0dc7","(function (global) {\n    const DATA_ALIGNMENT_ATTR = 'ezalign';\n\n    if (CKEDITOR.plugins.get('ezcustomtag')) {\n        return;\n    }\n\n    /**\n     * CKEditor plugin to configure the widget plugin so that it recognizes the\n     * `div[data-ezelement=\"embed\"]` elements as widget.\n     *\n     * @class ezembed\n     * @namespace CKEDITOR.plugins\n     * @constructor\n     */\n    CKEDITOR.plugins.add('ezcustomtag', {\n        requires: 'widget,ezaddcontent',\n\n        init: function (editor) {\n            editor.widgets.add('ezcustomtag', {\n                defaults: {\n                    name: \"customtag\",\n                },\n                draggable: false,\n                template: '<div data-ezelement=\"ezcustomtag\" data-ezname=\"{name}\"></div>',\n                requiredContent: 'div',\n\n                /**\n                 * Insert an `ezembed` widget in the editor. It overrides the\n                 * default implementation to make sure that in the case where an\n                 * embed widget is focused, a new one is added after it.\n                 *\n                 * @method insert\n                 */\n                insert: function () {\n                    var element = CKEDITOR.dom.element.createFromHtml(this.template.output(this.defaults)),\n                        wrapper = editor.widgets.wrapElement(element, this.name),\n                        temp = new CKEDITOR.dom.documentFragment(wrapper.getDocument()),\n                        instance;\n\n                    temp.append(wrapper);\n                    editor.widgets.initOn(element, this.name);\n                    editor.eZ.appendElement(wrapper);\n\n                    instance = editor.widgets.getByElement(wrapper);\n                    instance.ready = true;\n                    instance.fire('ready');\n                    instance.focus();\n                },\n\n                /**\n                 * It's not possible to *edit* an embed widget in AlloyEditor,\n                 * so `edit` directly calls `insert` instead. This is needed\n                 * because by default, the CKEditor engine calls this method\n                 * when an embed widget has the focus and the `ezembed` command\n                 * is executed. In AlloyEditor, we want to insert a new widget,\n                 * not to `edit` the focused widget as the editing process is\n                 * provided by the style toolbar.\n                 *\n                 * @method edit\n                 */\n                edit: function () {\n                    this.insert();\n                },\n\n                init: function () {\n                    this.on('focus', this.fireEditorInteraction);\n                    this.syncAlignment();\n                    this.getEzConfigElement();\n                    this.setWidgetContent('Testing content');\n                    this.cancelEditEvents();\n                },\n\n                /**\n                 * Sets the `name` of the custom tag.\n                 *\n                 * @method setName\n                 * @param {String} href\n                 * @return {CKEDITOR.plugins.widget}\n                 */\n                setName: function (name) {\n                    this.element.data('ezname', name);\n\n                    return this;\n                },\n\n                /**\n                 * Cancels the widget events that trigger the `edit` event as\n                 * an embed widget can not be edited in a *CKEditor way*.\n                 *\n                 * @method cancelEditEvents\n                 */\n                cancelEditEvents: function () {\n                    const cancel = (event) => event.cancel();\n\n                    this.on('doubleclick', cancel, null, null, 5);\n                    this.on('key', cancel, null, null, 5);\n                },\n\n                /**\n                 * Initializes the alignment on the widget wrapper if the widget\n                 * is aligned.\n                 *\n                 * @method syncAlignment\n                 */\n                syncAlignment: function () {\n                    const align = this.element.data(DATA_ALIGNMENT_ATTR);\n\n                    if (align) {\n                        this.setAlignment(align);\n                    } else {\n                        this.unsetAlignment();\n                    }\n                },\n\n                /**\n                 * Sets the alignment of the embed widget to `type` and fires\n                 * the corresponding `editorInteraction` event.\n                 *\n                 * @method setAlignment\n                 * @param {String} type\n                 */\n                setAlignment: function (type) {\n                    this.wrapper.data(DATA_ALIGNMENT_ATTR, type);\n                    this.element.data(DATA_ALIGNMENT_ATTR, type);\n                },\n\n                /**\n                 * Removes the alignment of the widget and fires the\n                 * corresponding `editorInteraction` event.\n                 *\n                 * @method unsetAlignment\n                 */\n                unsetAlignment: function () {\n                    this.wrapper.data(DATA_ALIGNMENT_ATTR, false);\n                    this.element.data(DATA_ALIGNMENT_ATTR, false);\n                },\n\n                /**\n                 * Checks whether the embed is aligned with `type` alignment.\n                 *\n                 * @method isAligned\n                 * @param {String} type\n                 * @return {Boolean}\n                 */\n                isAligned: function (type) {\n                    return this.wrapper.data(DATA_ALIGNMENT_ATTR) === type;\n                },\n\n                /**\n                 * Sets the widget content. It makes sure the config element is\n                 * not overwritten.\n                 *\n                 * @method setWidgetContent\n                 * @param {String|CKEDITOR.dom.node} content\n                 * @return {CKEDITOR.plugins.widget}\n                 */\n                setWidgetContent: function (content) {\n                    let element = this.element.getFirst(), next;\n\n                    while (element) {\n                        next = element.getNext();\n                        if (!element.data || !element.data('ezelement')) {\n                            element.remove();\n                        }\n                        element = next;\n                    }\n\n                    if (content instanceof CKEDITOR.dom.node) {\n                        this.element.append(content);\n                    } else {\n                        this.element.appendText(content);\n                    }\n\n                    return this;\n                },\n\n                /**\n                 * Sets a config value under the `key` for the embed.\n                 *\n                 * @method setConfig\n                 * @param {String} key\n                 * @param {String} value\n                 * @return {CKEDITOR.plugins.widget}\n                 */\n                setConfig: function (key, value) {\n                    let valueElement = this.getValueElement(key);\n\n                    if (!valueElement) {\n                        valueElement = new CKEDITOR.dom.element('span');\n                        valueElement.data('ezelement', 'ezvalue');\n                        valueElement.data('ezvalue-key', key);\n                        this.getEzConfigElement().append(valueElement);\n                    }\n\n                    valueElement.setText(value);\n\n                    return this;\n                },\n\n                /**\n                 * Returns the config value for the `key` or undefined if the\n                 * config key is not found.\n                 *\n                 * @method getConfig\n                 * @return {String}\n                 */\n                getConfig: function (key) {\n                    const valueElement = this.getValueElement(key);\n\n                    return valueElement ? valueElement.getText() : undefined;\n                },\n\n                /**\n                 * Returns the Element holding the config under `key`\n                 *\n                 * @method getValueElement\n                 * @param {String} key\n                 * @return {CKEDITOR.dom.element}\n                 */\n                getValueElement: function (key) {\n                    return this.element.findOne('[data-ezelement=\"ezvalue\"][data-ezvalue-key=\"' + key + '\"]');\n                },\n\n                /**\n                 * Returns the element used as a container the config values. if\n                 * it does not exist, it is created.\n                 *\n                 * @method getEzConfigElement\n                 * @return {CKEDITOR.dom.element}\n                 */\n                getEzConfigElement: function () {\n                    let config = this.element.findOne('[data-ezelement=\"ezconfig\"]');\n\n                    if (!config) {\n                        config = new CKEDITOR.dom.element('span');\n                        config.data('ezelement', 'ezconfig');\n                        this.element.append(config, true);\n                    }\n\n                    return config;\n                },\n\n                /**\n                 * Fires the editorInteraction event so that AlloyEditor editor\n                 * UI remains visible and is updated. This method also computes\n                 * `selectionData.region` and the `pageX` and `pageY` properties\n                 * so that the add toolbar is correctly positioned on the\n                 * widget.\n                 *\n                 * @method fireEditorInteraction\n                 * @param {Object|String} evt this initial event info object or\n                 * the event name for which the `editorInteraction` is fired.\n                 */\n                fireEditorInteraction: function (evt) {\n                    const wrapperRegion = this.getWrapperRegion();\n                    const name = evt.name || evt;\n                    const event = {\n                            editor: editor,\n                            target: this.element.$,\n                            name: \"widget\" + name,\n                            pageX: wrapperRegion.left,\n                            pageY: wrapperRegion.top + wrapperRegion.height,\n                        };\n\n                    editor.focus();\n                    this.focus();\n\n                    editor.fire('editorInteraction', {\n                        nativeEvent: event,\n                        selectionData: {\n                            element: this.element,\n                            region: wrapperRegion,\n                        },\n                    });\n                },\n\n                /**\n                 * Returns the wrapper element region.\n                 *\n                 * @method getWrapperRegion\n                 * @private\n                 * @return {Object}\n                 */\n                getWrapperRegion: function () {\n                    const scroll = this.wrapper.getWindow().getScrollPosition();\n                    const region = this.wrapper.getClientRect();\n\n                    region.top += scroll.y;\n                    region.bottom += scroll.y;\n                    region.left += scroll.x;\n                    region.right += scroll.x;\n                    region.direction = CKEDITOR.SELECTION_TOP_TO_BOTTOM;\n\n                    return region;\n                },\n            });\n        },\n    });\n})(window);\n\n\n\n// WEBPACK FOOTER //\n// ./src/bundle/Resources/public/js/alloyeditor/src/plugins/ez-custom-tag.js"],"sourceRoot":""}